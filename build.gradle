// apply plugin: 'java' としなくても，以下のようにまとめて書ける
apply {
  plugin 'java'
  plugin 'war'
  plugin 'jetty'
}

// jarファイルの名前
archivesBaseName = "sample-apps"
// javacのオプションに encoding=UTF-8 を追加する
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// Gralde標準外のソースパスを追加
sourceSets {
  main {
    java { srcDir 'src/java' }
  }
  test {
    java { srcDir 'src/test' }
  }
}

// Webリソースの場所（標準だと src/main/webapp）
webAppDirName = 'web'

// 依存ライブラリはローカルにあるJarファイルを直接参照
dependencies {
  providedRuntime fileTree(dir: 'lib/provided', include: '*.jar')
  compile fileTree(dir: 'lib/compile', include: '*.jar')
  testCompile fileTree(dir: 'lib/test', include: '*.jar')
}

// checkstyleとfindbugsの設定
apply {
  plugin 'checkstyle'
  plugin 'findbugs'
}

// mavenリポジトリからツールを取得せず，すでにあるツールを利用する
dependencies {
  checkstyle fileTree(dir: 'tool/checkstyle-5.1/', include: '*.jar')
  findbugs fileTree(dir: 'tool/findbugs-1.3.9/lib/', include: '*.jar')
}

// checkstyleの設定ファイルや実行時のオプションをそれぞれ設定する
checkstyleMain {
  configFile = file('tool/checkstyle-5.1/sun_checks.xml')
  ignoreFailures = true
}

checkstyleTest {
  configFile = file('tool/checkstyle-5.1/sun_checks.xml')
  ignoreFailures = true
}

findbugsMain {
  ignoreFailures = true
}

findbugsTest {
  ignoreFailures = true
}

// カバレッジ測定（jacoco）の設定
//   https://gist.github.com/1657770 より
test {
  jvmArgs "-javaagent:tool/jacoco-0.5.6/lib/jacocoagent.jar=destfile=${buildDir}/coverage-results/jacoco.exec",
      '-Djacoco=true',
      '-Xms128m',
      '-Xmx512m',
      '-XX:MaxPermSize=128m'

  doFirst {
    delete "${buildDir}/coverage-results"
  }

  doLast {
    ant {
      taskdef(name: 'jacocoreport', classname: 'org.jacoco.ant.ReportTask') {
        classpath path: "tool/jacoco-0.5.6/lib/jacocoant.jar"
      }

      mkdir dir: "${buildDir}/reports/coverage"

      jacocoreport {
        executiondata { file: "${buildDir}/coverage-results/jacoco.exec" }

        structure(name: archivesBaseName) {
          classfiles { fileset(dir: "${buildDir}/classes/main") }
          sourcefiles(encoding: 'UTF-8') { fileset(dir: 'src/java') }
        }

        xml destfile: "${buildDir}/reports/coverage/jacoco.xml"
        html destdir: "${buildDir}/reports/coverage"
      }
    }
  }
}
