// apply plugin: 'java' としなくても，以下のようにまとめて書ける
apply {
  plugin 'java'
  plugin 'war'
  plugin 'jetty'
}

// jarファイルの名前
archivesBaseName = "sample-apps"
// javacのオプションに encoding=UTF-8 を追加する
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// Gralde標準外のソースパスを追加
sourceSets {
  main {
    java { srcDir 'src/java' }
  }
  test {
    java { srcDir 'src/test' }
  }
}

// Webリソースの場所（標準だと src/main/webapp）
webAppDirName = 'web'

// 依存ライブラリはローカルにあるJarファイルを直接参照
dependencies {
  providedRuntime fileTree(dir: 'lib/provided', include: '*.jar')
  compile fileTree(dir: 'lib/compile', include: '*.jar')
  testCompile fileTree(dir: 'lib/test', include: '*.jar')
}

// checkstyleとfindbugsの設定
apply {
  plugin 'checkstyle'
  plugin 'findbugs'
}

// mavenリポジトリからツールを取得せず，すでにあるツールを利用する
dependencies {
  checkstyle fileTree(dir: 'tool/checkstyle-5.1/', include: '*.jar')
  findbugs fileTree(dir: 'tool/findbugs-1.3.9/lib/', include: '*.jar')
}

// checkstyleの設定ファイルや実行時のオプションをそれぞれ設定する
[checkstyleMain, checkstyleTest]*.configFile = file('tool/checkstyle-5.1/sun_checks.xml')
[checkstyleMain, checkstyleTest, findbugsMain, findbugsTest]*.ignoreFailures = true

// カバレッジ測定（jacoco）の設定するために，testタスクを上書きする
task test(overwrite: true, dependsOn: 'testClasses') {
  // なんか納得いかないけど，ここでディレクトリ掘らないと怒られる
  sourceSets.test.runtimeClasspath.each {
    if (!it.exists()) ant.mkdir dir: it.absolutePath
  }
  def jacoco_home = 'tool/jacoco-0.5.6'
  ant {
    delete file: 'jacoco.exec'
    mkdir dir: testResultsDir
    taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask') {
      classpath path: 'tool/ant-junit.jar'
    }
    taskdef(resource: 'org/jacoco/ant/antlib.xml') {
      classpath path: "${jacoco_home}/lib/jacocoant.jar"
    }
    coverage {
      junit(fork: 'on', printsummary: 'on', maxmemory: '256m') {
        sourceSets.test.runtimeClasspath.each {
          classpath location: it.absolutePath
        }
        formatter type: 'xml'
        batchtest(todir: testResultsDir) {
          fileset(dir: sourceSets.test.output.classesDir, includes: '**/*Test.class')
        }
      }
    }

    // カバレッジレポートの作成までやっちゃう
    mkdir dir: "${buildDir}/reports/coverage"
    report {
      executiondata { file: "jacoco.exec" }
      structure(name: archivesBaseName) {
        classfiles { fileset(dir: "${buildDir}/classes/main") }
        sourcefiles(encoding: 'UTF-8') { fileset(dir: 'src/java') }
      }
      xml destfile: "${buildDir}/reports/coverage/jacoco.xml"
      html destdir: "${buildDir}/reports/coverage"
    }
  }
}
