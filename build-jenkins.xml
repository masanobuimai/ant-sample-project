<?xml version="1.0" encoding="utf-8" ?>
<project name="sample-apps" default="build-webapps" basedir=".">
  <import file="build-common.xml"/>


  <target name="clean" description="クリーンアップ">
    <delete dir="${dest.dir}" />
  </target>


  <target name="prepare">
    <mkdir dir="${dest.dir}" />
    <mkdir dir="${dest.java.dir}" />
    <mkdir dir="${dest.test.dir}" />
    <mkdir dir="${result.dir}" />
  </target>


  <target name="compile-main" depends="prepare">
    <!-- リソースのコピー -->
    <copy todir="${dest.java.dir}">
       <fileset dir="${src.java.dir}">
         <patternset refid="resource"/>
       </fileset>
    </copy>
    <javac destdir="${dest.java.dir}" debug="on" debuglevel="lines,vars,source"
           optimize="off" deprecation="on" encoding="utf-8"
           includeAntRuntime="off">
       <src path="${src.java.dir}" />
      <classpath refid="base.classpath" />
    </javac>
  </target>


  <target name="build-webapps" description="WARファイルの作成" depends="compile-main">
    <war destfile="${dest.dir}/${ant.project.name}.war"
         update="true" duplicate="preserve"
         webxml="${src.web.dir}/WEB-INF/web.xml">
      <classes dir="${dest.java.dir}" />
      <lib file="${lib.compile.dir}/*.jar" />
      <fileset dir="${src.web.dir}" excludes="**/web.xml" />
    </war>
  </target>


  <target name="compile-test" depends="compile-main">
    <!-- リソースのコピー -->
    <copy todir="${dest.test.dir}">
       <fileset dir="${src.test.dir}">
         <patternset refid="resource"/>
       </fileset>
    </copy>
    <javac destdir="${dest.test.dir}" debug="on" debuglevel="lines,vars,source"
           optimize="off" deprecation="on" encoding="utf-8"
           includeAntRuntime="off">
      <src path="${src.test.dir}" />
      <classpath refid="test.classpath" />
      <classpath location="${dest.java.dir}" />
    </javac>
  </target>


  <target name="test" depends="compile-test" description="テストの実行とカバレッジレポートの作成">
    <!-- EclEmma(JaCoCo)の定義 -->
    <property name="jacoco.home" value="${tool.dir}/jacoco-0.5.6"/>
    <taskdef resource="org/jacoco/ant/antlib.xml">
      <classpath path="${jacoco.home}/lib/jacocoant.jar"/>
    </taskdef>
    <!-- ここまで -->

    <delete dir="${result.test.dir}" />
    <mkdir dir="${result.test.dir}" />

    <coverage>
      <junit fork="on" printsummary="on" maxmemory="256m">
        <classpath location="${dest.test.dir}" />
        <classpath location="${dest.java.dir}" />
        <classpath refid="test.classpath" />

        <formatter type="xml" />
        <batchtest todir="${result.test.dir}">
          <fileset dir="${dest.test.dir}" includes="**/*Test.class" />
        </batchtest>
      </junit>
    </coverage>

    <report>
      <executiondata>
        <file file="jacoco.exec"/>
      </executiondata>
      <structure name="${ant.project.name}">
        <classfiles>
          <fileset dir="${dest.java.dir}"/>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src.java.dir}"/>
        </sourcefiles>
      </structure>
      <xml destfile="${result.dir}/coverage_jacoco.xml" />
      <html destdir="${dest.dir}/report/coverage"/>

    </report>
    <!-- JaCoCoのレポートをEMMA形式に変換する -->
    <xslt style="${jacoco.home}/jacoco_to_emma.xslt"
          in="${result.dir}/coverage_jacoco.xml"
          out="${result.dir}/coverage.xml"
          classpath="${jacoco.home}/saxon9he.jar">
      <xmlcatalog>
        <dtd publicid="-//JACOCO//DTD Report 1.0//EN" location="${jacoco.home}/coverage/report.dtd"/>
      </xmlcatalog>
    </xslt>
  </target>


  <target name="javadoc" depends="prepare" description="Javadocの作成">
    <javadoc sourcepath="${src.java.dir}" destdir="${dest.javadoc.dir}"
             packagenames="com.example.*"
             classpathref="base.classpath"
             encoding="utf-8" />
  </target>


  <target name="release" depends="clean, test, build-webapps, javadoc"
                         description="リリースモジュールの作成">
    <zip destfile="${dest.dir}/${ant.project.name}.zip">
      <fileset file="${dest.dir}/${ant.project.name}.war"/>
      <zipfileset dir="${dest.javadoc.dir}" prefix="javadoc"/>
    </zip>
  </target>


  <target name="checkstyle" depends="prepare">
    <property name="checkstyle.home" value="${tool.dir}/checkstyle-5.1" />
    <taskdef resource="checkstyletask.properties"
             classpath="${checkstyle.home}/checkstyle-all-5.1.jar"/>
      <checkstyle config="${checkstyle.home}/sun_checks.xml" failOnViolation="no">
      <fileset dir="${src.java.dir}" includes="**/*.java"/>
      <formatter type="xml" toFile="${result.dir}/checkstyle-result.xml"/>
    </checkstyle>
  </target>


  <target name="findbugs" depends="compile-main">
    <property name="findbugs.home" value="${tool.dir}/findbugs-1.3.9" />
    <taskdef name="findbugs"
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
             classpath="${findbugs.home}/lib/findbugs-ant.jar"/>

    <findbugs home="${findbugs.home}"
              output="xml"
              outputFile="${result.dir}/findbugs-result.xml" >
      <sourcePath path="${src.java.dir}" />
      <class location="${dest.java.dir}" />
    </findbugs>
  </target>

  <target name="inspection" depends="checkstyle, findbugs" description="インスペクション">
  </target>

</project>
